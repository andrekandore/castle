#!/bin/bash

CMD=$1
ARG=$2

# Work out where is castle mounted
CASTLE_MOUNT_POINT=`mount | grep "fuse.castle" | cut -d" " -f3`
CONTROL_FILE=${CASTLE_MOUNT_POINT}/sys/control

MAJ=$(( ($ARG >> 8) & 0xFFF ))
MIN=$(( ($ARG & 0xFF) | (( $ARG >> 12 ) & 0xFFF00 ) ))

#echo "Cmd=$CMD, Arg = $ARG, Maj=$MAJ, Min=$MIN" > /dev/console
DEV=/dev/`cat /proc/partitions  | grep "$MAJ *$MIN " | awk '{print ( $4 ) }'`

function get_loop_file {
    LOOP=`/sbin/losetup -f`
    LOOP_NR=`echo $LOOP | sed -e 's#/dev/loop\(.*\)#\1#g'`                                             
    MAJ=7
    MIN=$LOOP_NR
}

case $CMD in
1)
    COMMAND_STR="claim $DEV";;
2)
    COMMAND_STR="release $DEV";;
3)
    get_loop_file
    COMMAND_STR="attach $ARG dev-$MAJ-$MIN";;
4)
    # First, delete the loop device we've created when attaching
    # echo "Deleting loop: /dev/loop$MIN" > /dev/console
    /sbin/losetup -d /dev/loop$MIN
    COMMAND_STR="detach dev-$MAJ-$MIN";;
5)
    COMMAND_STR="create $ARG";;
6)
    COMMAND_STR="clone $ARG";;
7)
    COMMAND_STR="snapshot dev-$MAJ-$MIN";;
8)
    COMMAND_STR="init";;
esac

#echo $COMMAND_STR > /dev/console
echo -n $COMMAND_STR > $CONTROL_FILE

# Special handling for "attach" command
if [ $CMD == 3 ]; then
	/sbin/losetup $LOOP ${CASTLE_MOUNT_POINT}/devices/dev-$MAJ-$MIN
    MAJMIN=$(( ($MIN & 0xFF) | ( ($MIN & 0xFFF00) << 12 ) | ($MAJ << 8) ))
    #echo "Attached loop MAJMIN: `printf "%X" ${MAJMIN}`" > /dev/console
	/usr/sbin/castle-ctl "ret" "`printf "0x%X" ${MAJMIN}`"
fi
