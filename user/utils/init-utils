# Hey, emacs! This is a -*- shell-script -*-

# Size of loopback files to create, in MB (if loopback files are used)
DISK_SIZE=1000000

CONTROL_FILE=/dev/castle-fs/control
CACHE_CFG=/etc/acunu/cache_size

function kernel_fs_running {
    [ -e "/dev/castle-fs/control" ] || lsmod | grep -q '^castle_fs$'
}

function get_cache_size {
    if [ -e ${CACHE_CFG} ]; then
        cat ${CACHE_CFG}
    else
        awk '/MemTotal/ { halfram = $2 / 2 } END { min = 200000; if (halfram < min) { print halfram } else { print min } }' /proc/meminfo
    fi
}

function init_kernel_fs {
    if ! kernel_fs_running; then
        echo "Castle FS kernel module not found, trying to insert."
        modprobe castle-fs castle_cache_size=$(get_cache_size)
        # Wait up to 5 seconds for the control file to appear
        # udev renaming is sometimes slow
        for i in `seq 50`; do
            if [ -e "${CONTROL_FILE}" ]; then
                break
            fi
            # Wait 0.1s
            usleep 100000
        done
        if [ ! -e "${CONTROL_FILE}" ]; then
            echo "ERROR: control file '${CONTROL_FILE}' has not been created after kernel module insertion. Exiting."
            exit 1
        fi
    fi
}

function unmount_kernel_fs {
    if kernel_fs_running; then 
        echo "Unmounting Kernel FS..."

        rmmod castle_fs
        
        # Wait up to 5 seconds for the control file to disappear
        for i in `seq 50`; do
            if [ ! -e ${CONTROL_FILE} ]; then
                break
            fi
                # Wait 0.1s
            usleep 100000
        done
        if [ -e ${CONTROL_FILE} ]; then
            echo "EROOR: removed castle_fs module, but the control file '${CONTROL_FILE}' is still there. Exiting."
            exit 1
        fi
    fi
}

function load_fs_and_claim {
    declare -a devs=() loops=()

    for disk in "$@"
    do
      if [ -e "$disk" ] && [ -b "$disk" ]
          then
          # Block special
          devs=("${devs[@]}" "$disk")
          continue
      fi

      if ! [ -e "$disk" ]
      then
          if echo $disk | grep -q '^/dev/'
          then
          # Presumably block special device (not existing)
              echo "Device $disk does not exist, aborting"
              exit 1
          fi

          # Loopback file (not existing)
          mkdir -p $(dirname "$disk")
          dd conv=excl if=/dev/zero of=$disk bs=1M count=1 seek=$DISK_SIZE 2>/dev/null
          mkcastlefs "$disk"
      fi

      if [ -e "$disk" ] && [ -f "$disk" ]
      then
          # Loopback file (existing)
          loops=("${loops[@]}" "$disk")
      fi
    done

    for disk in "${loops[@]}"
    do
      loop=$(losetup -f)
      losetup "$loop" "$disk"
      devs=("${devs[@]}" "$loop")
    done

    init_kernel_fs

    for dev in "${devs[@]}"
    do
      castle-cli claim_dev "$dev" > /dev/null
    done
}
